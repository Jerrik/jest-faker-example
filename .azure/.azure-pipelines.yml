trigger:
  - develop
  - main

pool:
  vmImage: 'ubuntu-latest'

variables:
  - group: custom
  - name: stageEnv
    ${{ if eq(variables['Build.SourceBranch'], 'refs/heads/develop') }}:
      value: 'dev'
    ${{ elseif eq(variables['Build.SourceBranch'], 'refs/heads/main') }}:
      value: 'qa'
    ${{ else }}:
      value: 'dev'

jobs:
  - job: Deployment
    steps:
      - script: |
          echo ##vso[build.addbuildtag]$(Build.SourceBranchName)
        displayName: 'Tagging Build'
      - task: Npm@1
        displayName: 'npm install'
        inputs:
          verbose: true

      - task: AWSShellScript@1
        displayName: Testing
        inputs:
          awsCredentials: 'CUSTOM-LAMBDA-DEPLOY'
          regionName: $(AWS_REGION)
          scriptType: inline
          inlineScript: 'npm run test:ci'
          disableAutoCwd: true
          failOnStandardError: false

      - task: PublishTestResults@2
        displayName: 'Publish unit test results'
        inputs:
          testResultsFiles: 'coverage/jest-junit.xml'
          testRunTitle: 'custom-functions--$(stageEnv)'
          failTaskOnFailedTests: true
        condition: succeededOrFailed()

      - task: PublishCodeCoverageResults@1
        displayName: 'Publish code coverage results'
        inputs:
          codeCoverageTool: Cobertura
          summaryFileLocation: '$(System.DefaultWorkingDirectory)/coverage/cobertura-coverage.xml'
        condition: succeededOrFailed()

      - task: AWSShellScript@1
        displayName: Deploying to $(stageEnv)
        inputs:
          awsCredentials: 'CUSTOM-LAMBDA-DEPLOY'
          regionName: $(AWS_REGION)
          scriptType: inline
          inlineScript: |
            npx serverless deploy --verbose --stage $(stageEnv) --region $(AWS_REGION)
            npx serverless s3deploy --stage $(stageEnv) --region $(AWS_REGION)
          failOnStandardError: false
        env:
          BUILD: $(Build.BuildNumber)
